name: Continuous Integration
on: [push, pull_request]

jobs:
    check:
        strategy:
            matrix:
                os: [macos-latest, windows-latest, ubuntu-latest]
        runs-on: ${{matrix.os}}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Install toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  profile: minimal
                  override: true
            - name: Check
              uses: actions-rs/cargo@v1
              with:
                  command: check
                  args: --locked --verbose

    clippy:
        strategy:
            matrix:
                os: [macos-latest, windows-latest, ubuntu-latest]
        runs-on: ${{matrix.os}}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Install toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  profile: minimal
                  override: true
            - name: Check the lints
              uses: actions-rs/cargo@v1
              with:
                  command: clippy
                  args: --verbose -- -D warnings

    test:
        strategy:
            matrix:
                os: [macos-latest, windows-latest, ubuntu-latest]
        runs-on: ${{matrix.os}}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Install toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  profile: minimal
                  override: true
            - name: Run the tests
              uses: actions-rs/cargo@v1
              with:
                  command: test
                  args: --locked --verbose

    formatting:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Install toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  profile: minimal
                  override: true
            - name: Check the formatting
              uses: actions-rs/cargo@v1
              with:
                  command: fmt
                  args: --all -- --check --verbose

    build:
        needs: [clippy, formatting, check, test]
        strategy:
            matrix:
                os:
                    - { NAME: linux, OS: ubuntu-latest, ARCH: x86_64, PATH: target/optimized/bob, TARGET: "" }
                    - { NAME: linux, OS: ubuntu-24.04-arm, ARCH: arm, PATH: target/optimized/bob, TARGET: "" }
                    - { NAME: macos, OS: macos-13, ARCH: x86_64, PATH: target/optimized/bob, TARGET: "" }
                    - { NAME: windows, OS: windows-latest, ARCH: x86_64, PATH: build, TARGET: "" }
                    - { NAME: macos, OS: macos-latest, ARCH: arm, PATH: target/optimized/bob, TARGET: "" }
                tls:
                    - { NAME: Rustls, SUFFIX: "", ARGS: "" }
                    - { NAME: OpenSSL, SUFFIX: "-openssl", ARGS: "--no-default-features --features native-tls" }
        runs-on: ${{matrix.os.OS}}
        steps:
            - uses: actions/checkout@v4
            - name: Install Rust
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  profile: minimal
                  override: true
            - name: Install OpenSSL libraries
              run: sudo apt update && sudo apt install libssl-dev
              if: matrix.os.OS == 'ubuntu-latest' && matrix.tls.NAME == 'OpenSSL'
            - uses: Swatinem/rust-cache@v1
            - name: Build Bob
              uses: actions-rs/cargo@v1
              with:
                  command: build
                  args: --locked --profile optimized ${{ matrix.tls.ARGS }}
            - name: Setup Bob build directory
              run: |
                  mkdir build
                  copy .\\bin\\vcruntime140.dll .\\build
                  copy .\\target\\optimized\\bob.exe .\\build
              if: matrix.os.OS == 'windows-latest'
            - name: Upload Bob binary
              uses: actions/upload-artifact@v4
              with:
                  name: "bob-${{ matrix.os.NAME }}-${{ matrix.os.ARCH }}${{ matrix.tls.SUFFIX }}"
                  path: ${{ matrix.os.PATH }}
                  if-no-files-found: error
                  retention-days: 7
    appimage:
      needs: [build]
      runs-on: ubuntu-latest
      steps:
          - name: Checkout
            uses: actions/checkout@v4
          
          - name: Download Linux binary
            uses: actions/download-artifact@v4
            with:
                name: "bob-linux-x86_64"
                path: appdir/usr/bin
              
          - name: Make binary executable
            run: chmod +x appdir/usr/bin/bob
          
          - name: Create AppDir structure
            run: |
              mkdir -p appdir/usr/share/applications
              mkdir -p appdir/usr/share/icons/hicolor/256x256/apps
              
          - name: Create desktop file
            run: |
              cat > appdir/usr/share/applications/bob.desktop << EOF
              [Desktop Entry]
              Name=Bob
              Exec=bob
              Icon=bob
              Type=Application
              Categories=Development;
              EOF
              
          - name: Copy icon
            run: |
              # Copy your icon file if you have one, or create a placeholder
              # For example: cp assets/bob-logo.png appdir/usr/share/icons/hicolor/256x256/apps/bob.png
              # Or create a placeholder:
              convert -size 256x256 xc:transparent -fill "#3465A4" -draw "circle 128,128 128,64" appdir/usr/share/icons/hicolor/256x256/apps/bob.png
          
          - name: Create AppRun file
            run: |
              cat > appdir/AppRun << EOF
              #!/bin/sh
              SELF=\$(readlink -f "\$0")
              HERE=\${SELF%/*}
              export PATH="\${HERE}/usr/bin:\${PATH}"
              exec "\${HERE}/usr/bin/bob" "\$@"
              EOF
              chmod +x appdir/AppRun
              
          - name: Install appimagetool
            run: |
              wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
              chmod +x appimagetool-x86_64.AppImage
              
          - name: Build AppImage
            run: |
              ./appimagetool-x86_64.AppImage appdir
              
          - name: Upload AppImage
            uses: actions/upload-artifact@v4
            with:
              name: "bob-linux-x86_64.AppImage"
              path: Bob*.AppImage
              if-no-files-found: error
              retention-days: 7
